// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addTeacher": {
            "post": {
                "description": "Добавляет нового преподавателя по его email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "teachers"
                ],
                "summary": "Добавление преподавателя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Display name преподавателя",
                        "name": "display_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Преподаватель успешно добавлен",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "mail is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error adding teacher mail",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/archive": {
            "post": {
                "description": "Архивирует данные из основных таблиц в архивные. Требуется подтверждение (передача слова 'archive' в query-параметре).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "archive"
                ],
                "summary": "Архивирование данных",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Подтверждение архивирования (должно быть 'archive')",
                        "name": "approval",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно архивированы",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "enter word 'archive' to continue",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Error adding teacher mail",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getExport": {
            "get": {
                "description": "Возвращает экспорт по указанному ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exports"
                ],
                "summary": "Получение экспорта по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID экспорта",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Файл успешно скачан"
                    }
                }
            }
        },
        "/getExportsList": {
            "get": {
                "description": "Возвращает список всех экспортов из базы данных",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "exports"
                ],
                "summary": "Получение списка экспортов",
                "responses": {
                    "200": {
                        "description": "Список экспортов",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.ExportResponse"
                            }
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get exports",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getSheetData": {
            "get": {
                "description": "Получает данные из Google Sheets по ссылке и обрабатывает их",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "sheets"
                ],
                "summary": "Получение данных из Google Sheets",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ссылка на Google Sheets",
                        "name": "tables_link",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Имя листа в Google Sheets",
                        "name": "sheet_name",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные успешно обработаны",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "sheet_name is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to get sheet data",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/loadXls": {
            "get": {
                "description": "Генерирует Excel-файл на основе комментариев и возвращает его для скачивания",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/octet-stream"
                ],
                "tags": [
                    "files"
                ],
                "summary": "Генерация Excel-файла",
                "responses": {
                    "200": {
                        "description": "Excel-файл с комментариями",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "401": {
                        "description": "Authentication required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Не удалось отправить файл",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.ExportResponse": {
            "type": "object",
            "properties": {
                "export_date": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
